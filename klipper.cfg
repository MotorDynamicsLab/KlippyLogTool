[virtual_sdcard]
path = /home/pi/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	{% set th = printer.toolhead %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	{% set z_final = [th.position.z + 100, th.axis_maximum.z]|min %}
	{% set y_final = th.axis_maximum.y - 1 %}
	
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	
	SAVE_GCODE_STATE NAME=STATE_CANCEL_PRINT
	M400
	G92 E0
	G1 E-25.0 F3600
	TURN_OFF_HEATERS
	
	G90
	G0 Z{z_safe} F3600
	G1 X5 Y{y_final} F3600
	G1 Z{z_final} F600
	M107
	RESTORE_GCODE_STATE NAME=STATE_CANCEL_PRINT
	
	LED_ERROR
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
gcode = 
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	{% set th = printer.toolhead %}
	{% set y_park = th.axis_maximum.y|float - 5.0 %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	SAVE_GCODE_STATE NAME=PAUSE_STATE
	G91
	G1 E-{E} F3600
	G90
	BASE_PAUSE
	G1 Z{z_safe} F900
	G1 X3 Y{y_park} F5000
variable_extrude = 25.0

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	G91
	G1 E{E+3} F240
	RESTORE_GCODE_STATE NAME=PAUSE_STATE
	BASE_RESUME

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE | default(1)|int != 0 %}
	{% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
	{% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x | default(0.0) %}
	{% set custom_park_y  = client.custom_park_y | default(0.0) %}
	{% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
	{% set sp_hop         = client.speed_hop | default(15) * 60 %}
	{% set sp_move        = client.speed_move | default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z | default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN | default(0) | float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed | float | abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
	{% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
	{% set speed = params.SPEED | default(client.speed_retract) | default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

[mcu]
serial = /dev/serial/by-path/platform-fe9c0000.xhci-usb-0:1.3:1.0
restart_method = command

[mcu pth]
serial = /dev/serial/by-path/platform-fe9c0000.xhci-usb-0:1.2:1.0
restart_method = command

[printer]
kinematics = corexy
max_velocity = 420
max_accel = 8000
square_corner_velocity = 7
max_z_velocity = 20
max_z_accel = 150

[stepper_x]
step_pin = gpio14
dir_pin = !gpio13
enable_pin = !gpio15
microsteps = 16
rotation_distance = 40
endstop_pin = tmc2209_stepper_x:virtual_endstop
homing_retract_dist = 0
position_endstop = 0
position_max = 185
homing_speed = 40

[tmc2209 stepper_x]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 3
run_current = 0.7
stealthchop_threshold = 999999
diag_pin = ^gpio16
driver_sgthrs = 48

[stepper_y]
step_pin = gpio19
dir_pin = !gpio28
enable_pin = !gpio2
microsteps = 16
rotation_distance = 40
endstop_pin = tmc2209_stepper_y:virtual_endstop
homing_retract_dist = 0
position_endstop = 180
position_max = 180
homing_speed = 40
homing_positive_dir = True

[tmc2209 stepper_y]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 1
run_current = 0.7
stealthchop_threshold = 999999
diag_pin = ^gpio25
driver_sgthrs = 48

[stepper_z]
step_pin = gpio6
dir_pin = !gpio5
enable_pin = !gpio7
microsteps = 16
rotation_distance = 40
gear_ratio = 75:10
endstop_pin = gpio3
position_min = -4.0
position_max = 175
homing_speed = 13
position_endstop = 11.410

[tmc2209 stepper_z]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 2
run_current = 0.3
stealthchop_threshold = 999999

[extruder]
step_pin = gpio11
dir_pin = gpio10
enable_pin = !gpio12
microsteps = 16
full_steps_per_rotation = 200
rotation_distance = 4.637
nozzle_diameter = 0.4
filament_diameter = 1.75
heater_pin = pth:gpio9
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = pth:gpio29
pullup_resistor = 2200
control = pid
pid_kp = 25.12
pid_ki = 1.073
pid_kd = 147
min_temp = -100
max_temp = 300
max_extrude_only_distance = 500
max_extrude_only_velocity = 120
max_extrude_cross_section = 2
pressure_advance = 0.25

[tmc2209 extruder]
uart_pin = gpio9
tx_pin = gpio8
uart_address = 0
run_current = 0.62
hold_current = 0.4

[thermistor SDNT2012X104_3950]
temperature1 = 25
resistance1 = 100000
beta = 3950

[heater_bed]
heater_pin = gpio21
sensor_type = SDNT2012X104_3950
sensor_pin = gpio26
pwm_cycle_time = 0.3
max_power = 1.0
control = pid
pid_kp = 56.852
pid_ki = 2.1
pid_kd = 383.75
min_temp = -220
max_temp = 120

[probe]
pin = pth:gpio24
x_offset = 0
y_offset = 0
z_offset = 0
speed = 3
samples = 6
sample_retract_dist = 0.7
samples_tolerance = 0.05
samples_result = median

[controller_fan mcu_fan1]
pin = gpio17
max_power = 0.8
shutdown_speed = 0
kick_start_time = 1
fan_speed = 0.8
idle_timeout = 5
stepper = stepper_x, stepper_y, stepper_z

[controller_fan mcu_fan2]
pin = gpio18
max_power = 0.5
shutdown_speed = 0
kick_start_time = 1
fan_speed = 0.5
idle_timeout = 5
stepper = stepper_x, stepper_y, stepper_z

[heater_fan hotend_fan]
pin = pth:gpio5
max_power = 1.0
kick_start_time = 0.5
heater = extruder
fan_speed = 0.7

[fan]
pin = pth:gpio6
max_power = 1.0
kick_start_time = 0.5
off_below = 0.13
cycle_time = 0.010

[output_pin pcb_led]
pin = !pth:gpio8

[neopixel indicator]
pin = gpio24
chain_count = 5
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0

[adxl345]
cs_pin = pth:gpio21
spi_software_sclk_pin = pth:gpio18
spi_software_mosi_pin = pth:gpio20
spi_software_miso_pin = pth:gpio19

[resonance_tester]
accel_chip = adxl345
probe_points = 
	85, 85, 20

[idle_timeout]
timeout = 1800

[bed_screws]
screw1 = 5,170
screw1_name = fl
screw2 = 180,170
screw2_name = fr
screw3 = 90,20
screw3_name = bm

[output_pin beeper]
pin = gpio22
value = 0
shutdown_value = 0

[bed_tilt]
points = 
	0, 20
	116, 20
	116, 106
	0,  106
speed = 150
horizontal_move_z = 4

[gcode_macro _HOME_X]
gcode = 
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.7 %}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	SAVE_GCODE_STATE NAME=STATE_HOME_X
	
	
	G28 X
	
	G91
	G1 X5 F1200
	
	
	G4 P500
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
	RESTORE_GCODE_STATE NAME=STATE_HOME_X

[gcode_macro _HOME_Y]
gcode = 
	
	{% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
	{% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
	{% set HOME_CURRENT = 0.7 %}
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
	SAVE_GCODE_STATE NAME=STATE_HOME_Y
	
	
	G28 Y
	
	G91
	G1 Y-5 F1200
	
	
	G4 P500
	
	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
	RESTORE_GCODE_STATE NAME=STATE_HOME_Y

[gcode_macro LIFT_Z]
gcode = 
	QUERY_ENDSTOPS
	{% if printer.query_endstops.last_query["z"] %}
	G91
	G1 Z30
	{% endif %}

[homing_override]
axes = xyz
set_position_z = 0
gcode = 
	{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
	SAVE_GCODE_STATE NAME=STATE_HOME_OVERRIDE
	
	{% if home_all or 'Y' in params or 'X' in params or 'Z' in params %}
	QUERY_ENDSTOPS
	LIFT_Z
	{% endif %}
	
	G90
	{% if home_all or 'Y' in params %}
	_HOME_Y
	G0 Y60 F3600
	{% endif %}
	
	{% if home_all or 'X' in params %}
	_HOME_X
	G0 X40 F3600
	{% endif %}
	
	G28 Z
	G91
	G1 Z10
	RESTORE_GCODE_STATE NAME=STATE_HOME_OVERRIDE

[gcode_macro M300]
description = Implements M300 gcode which allows beeper to be used
gcode = 
	{% set TIME_MS = params.P|default(100)|float %}
	SET_PIN PIN=beeper VALUE=1
	G4 P{TIME_MS}
	SET_PIN PIN=beeper VALUE=0

[gcode_macro M600]
description = Implements M600 gcode (pause & filament change)
gcode = 
	pause
	SAVE_GCODE_STATE NAME=M600
	G91
	G1 Z20
	FRONT
	M83
	G1 E10 F300
	G1 E-30 F3000
	G4 P200
	G1 E-100 F1200
	G1 E-100 F1200
	G1 E-100 F1200
	G1 E-100 F1200
	M400
	RESTORE_GCODE_STATE NAME=M600
	M117 Unload Complete!

[gcode_macro CHOME]
description = Homes XYZ axis only if printer is in a non-homed state
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro CENTER]
description = Moves the toolhead to the center
gcode = 
	CHOME
	{% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
	{% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
	G90
	G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description = Moves the toolhead to the front
gcode = 
	CHOME
	{% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
	{% set y_front = printer.toolhead.axis_maximum.y|float - 10 %}
	G90
	G1 X{x_center} Y{y_front} F7800

[gcode_macro NOZZLE_PURGE]
description = Draw a purge line at the front left edge of the build plate
gcode = 
	CHOME
	SAVE_GCODE_STATE NAME=NOZZLE_PURGE
	G90
	G0 X5 Y40 F7200
	G0 Z0.2
	M83
	G1 X5 Y135 E30 F800
	G1 E-0.5 F400
	G1 Y170 F4000
	G1 Z0.4
	RESTORE_GCODE_STATE NAME=NOZZLE_PURGE

[gcode_macro NOZZLE_DOCK]
description = Docks the nozzle at the corner of the bed to prevent ooze
variable_dock_x = 3.5
variable_dock_y = 1.0
variable_dock_z = 0.0
gcode = 
	CHOME
	SAVE_GCODE_STATE NAME=NOZZLE_DOCK
	G91
	
	G90
	G0 X{dock_x} Y{dock_y} F7200
	G0 Z{dock_z}
	RESTORE_GCODE_STATE NAME=NOZZLE_DOCK

[gcode_macro NOZZLE_UNDOCK]
description = Safely moves the nozzle out of its docking position
gcode = 
	CHOME
	SAVE_GCODE_STATE NAME=NOZZLE_UNDOCK
	G91
	G1 Z3
	RESTORE_GCODE_STATE NAME=NOZZLE_UNDOCK

[gcode_macro UNLOAD_FILAMENT]
description = Unloads filament from toolhead. Hotend is not preheated, if TEMP parameter is set to 0
gcode = 
	{% set EXTRUDER_TEMP = params.TEMP|default(220)|int %}
	{% set MIN_TEMP = params.TEMP|default(220)|float * 0.98 %}
	{% set CURRENT_TARGET = printer.extruder.target|float %}
	SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
	CHOME
	G91
	G1 Z20
	FRONT
	
	{% if EXTRUDER_TEMP != 0 %}
	LED_PENDING
	{% if CURRENT_TARGET < EXTRUDER_TEMP %}
	M104 S{EXTRUDER_TEMP}
	{% endif %}
	TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP}
	{% endif %}
	LED_WORKING
	M83
	G1 E10 F300
	G1 E-30 F3600
	G4 P200
	G1 E-400 F1200
	M400
	RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
	M300 P1000
	M117 Unload Complete!
	LED_READY

[gcode_macro LOAD_FILAMENT]
description = Loads new filament into toolhead. Hotend is not preheated, if TEMP parameter is set to 0
gcode = 
	{% set EXTRUDER_TEMP = params.TEMP|default(220)|int %}
	{% set MIN_TEMP = params.TEMP|default(220)|float * 0.98 %}
	{% set CURRENT_TARGET = printer.extruder.target|float %}
	SAVE_GCODE_STATE NAME=LOAD_FILAMENT
	CHOME
	G91
	G1 Z20
	FRONT
	
	{% if EXTRUDER_TEMP != 0 %}
	LED_PENDING
	{% if CURRENT_TARGET < EXTRUDER_TEMP %}
	M104 S{EXTRUDER_TEMP}
	{% endif %}
	TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP}
	{% endif %}
	LED_WORKING
	M83
	G1 E400 F1200
	G1 E20 F600
	M400
	RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
	M300 P200
	G4 P100
	M300 P200
	M117 Load Complete!
	LED_READY

[gcode_macro G29]
description = Loads new filament into toolhead. Hotend is not preheated, if TEMP parameter is set to 0
gcode = 
	CHOME

[gcode_macro PRINT_START]
description = print startup sequence
gcode = 
	{% set BED_TEMP = params.BED|default(65)|float %}
	{% set READY_TEMP = params.BED|default(65)|float * 0.92 %}
	{% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_START
	LED_PENDING
	M107
	M140 S{BED_TEMP}
	M104 S150
	G29
	
	TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={READY_TEMP}
	
	NOZZLE_DOCK
	M109 S{EXTRUDER_TEMP}
	M190 S{BED_TEMP}
	NOZZLE_UNDOCK
	
	G90
	RESTORE_GCODE_STATE NAME=STATE_PRINT_START
	LED_WORKING
	NOZZLE_PURGE

[gcode_macro PRINT_END]
description = print finish sequence
gcode = 
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
	{% set y_final = th.axis_maximum.y - 1 %}
	{% set z_final = [th.position.z + 40, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	M400
	G92 E0
	G1 E-10.0 F3600
	TURN_OFF_HEATERS
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X5 Y{y_final} F3600
	G0 Z{z_final} F600
	
	M107
	LED_COMPLETE
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro LED_PENDING]
description = sets the indicators to teal
gcode = 
	SET_LED LED=indicator RED=0 GREEN=0.4 BLUE=0.2 INDEX=1 TRANSMIT=0
	SET_LED LED=indicator RED=0 GREEN=0.4 BLUE=0.2 INDEX=3

[gcode_macro LED_WORKING]
description = sets the indicators to purple
gcode = 
	SET_LED LED=indicator RED=0.5 GREEN=0.1 BLUE=0.6 INDEX=1 TRANSMIT=0
	SET_LED LED=indicator RED=0.5 GREEN=0.1 BLUE=0.6 INDEX=3

[gcode_macro LED_COMPLETE]
description = sets the indicators to green
gcode = 
	SET_LED LED=indicator RED=0 GREEN=0.8 BLUE=0 INDEX=1 TRANSMIT=0
	SET_LED LED=indicator RED=0 GREEN=0.8 BLUE=0 INDEX=3

[gcode_macro LED_ERROR]
description = sets the indicators to red
gcode = 
	SET_LED LED=indicator RED=0.6 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
	SET_LED LED=indicator RED=0.6 GREEN=0 BLUE=0 INDEX=3

[gcode_macro LED_READY]
description = sets the indicators and light strips to white
gcode = 
	SET_LED LED=indicator RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=1 TRANSMIT=0
	SET_LED LED=indicator RED=0.05 GREEN=0.08 BLUE=0.1 INDEX=2 TRANSMIT=0
	SET_LED LED=indicator RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=3 TRANSMIT=0
	SET_LED LED=indicator RED=1.0 GREEN=1.0 BLUE=1.0 INDEX=4 TRANSMIT=0
	SET_LED LED=indicator RED=1.0 GREEN=1.0 BLUE=1.0 INDEX=5

[gcode_macro LED_OFF]
gcode = 
	SET_LED LED=indicator RED=0 GREEN=0 BLUE=0

[delayed_gcode STARTUP_CODE]
initial_duration = 0.5
gcode = 
	LED_READY

[exclude_object]
aaaaaaaaaaaaaaaaaaaaaaa