[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_3D0032000650534E4E313020-if00

[mcu host]
serial = /tmp/klipper_host_mcu

[mcu nhk]
serial = /dev/serial/by-id/usb-Klipper_rp2040_30333938340463E9-if00
restart_method = command

[beacon]
serial = /dev/serial/by-id/usb-Beacon_Beacon_RevH_49E8D9D55154364134202020FF142215-if00
x_offset = -23.8
y_offset = 0
mesh_main_direction = x
mesh_runs = 2
home_xy_position = 168.5, 175
home_z_hop = 5
home_z_hop_speed = 30
home_xy_move_speed = 300
home_method = contact
home_method_when_homed = proximity
home_autocalibrate = unhomed

[force_move]
enable_force_move = true

[gcode_arcs]
resolution = 0.1

[printer]
kinematics = corexy
max_velocity = 750
max_accel = 7000
max_z_velocity = 15
max_z_accel = 350
square_corner_velocity = 20.0

[stepper_y]
step_pin = PF13
dir_pin = !PF12
enable_pin = !PF14
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_y:virtual_endstop
position_min = 0
position_endstop = 350
position_max = 350
homing_speed = 200
homing_retract_dist = 0
homing_positive_dir = true

[tmc2209 stepper_y]
uart_pin = PC4
interpolate = false
run_current = 0.8
home_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0
diag_pin = ^PG6
driver_sgthrs = 45

[stepper_x]
step_pin = PG0
dir_pin = !PG1
enable_pin = !PF15
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 200
endstop_pin = tmc2209_stepper_x:virtual_endstop
position_min = 0
position_endstop = 337
position_max = 337
homing_speed = 200
homing_retract_dist = 0
homing_positive_dir = true

[tmc2209 stepper_x]
uart_pin = PD11
interpolate = True
run_current = 0.8
home_current = 0.8
sense_resistor = 0.110
stealthchop_threshold = 0
diag_pin = ^PG9
driver_sgthrs = 45

[stepper_z]
step_pin = PF11
dir_pin = !PG3
enable_pin = !PG5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16
endstop_pin = probe:z_virtual_endstop
position_max = 320
position_min = -5
homing_speed = 8
second_homing_speed = 3
homing_retract_dist = 0
position_endstop = 0.345

[tmc2209 stepper_z]
uart_pin = PC6
interpolate = false
run_current = 1.
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z1]
step_pin = PG4
dir_pin = PC1
enable_pin = !PA0
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = PC7
interpolate = false
run_current = 1.
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z2]
step_pin = PF9
dir_pin = !PF10
enable_pin = !PG2
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = PF2
interpolate = false
run_current = 1.
sense_resistor = 0.110
stealthchop_threshold = 0

[stepper_z3]
step_pin = PC13
dir_pin = PF0
enable_pin = !PF1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16

[tmc2209 stepper_z3]
uart_pin = PE4
interpolate = false
run_current = 1.
sense_resistor = 0.110
stealthchop_threshold = 0

[extruder]
control = mpc
heater_power = 120
cooling_fan = fan
block_heat_capacity = 28.4993
sensor_responsiveness = 0.0870755
ambient_transfer = 0.0895647
fan_ambient_transfer = 0.0895647, 0.19642296, 0.20595985, 0.21175182, 0.21595981, 0.21928128, 0.22203301, 0.22438649, 0.22644532, 0.22827701
filament_density = 1.1
filament_heat_capacity = 1.8
step_pin = nhk:gpio23
dir_pin = nhk:gpio24
enable_pin = !nhk:gpio25
rotation_distance = 22.67895
gear_ratio = 50:8
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.6
filament_diameter = 1.75
heater_pin = nhk:gpio9
sensor_type = PT1000
sensor_pin = nhk:gpio29
pullup_resistor = 2200
min_temp = 10
max_temp = 505
max_power = 1
min_extrude_temp = 170
pressure_advance = 0.05
pressure_advance_smooth_time = 0.020
max_extrude_only_distance = 210.0
max_extrude_cross_section = 5

[tmc2209 extruder]
uart_pin = nhk:gpio0
tx_pin = nhk:gpio1
run_current = .8
sense_resistor = 0.110
stealthchop_threshold = 0
interpolate = false

[verify_heater extruder]
max_error = 120
check_gain_time = 1000000
hysteresis = 10

[heater_bed]
heater_pin = PA1
sensor_type = Generic 3950
sensor_pin = PF3
pwm_cycle_time = 0.01695
max_power = 1
min_temp = 0
max_temp = 120
control = pid
pid_kp = 37.420
pid_ki = 1.247
pid_kd = 280.651

[temperature_sensor Chamber]
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = PF5

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 10
max_temp = 100

[temperature_sensor nhk]
sensor_type = temperature_mcu
sensor_mcu = nhk

[multi_pin part_cooling_pin]
pins = PA8,PE5

[fan]
pin = multi_pin:part_cooling_pin

[heater_fan controller_fan]
pin = PD12
kick_start_time = 0.5
heater = heater_bed
heater_temp = 45.0
fan_speed = .6

[heater_fan nevermore]
pin = PD14
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0
heater = heater_bed
heater_temp = 60
fan_speed = 1

[neopixel caselight]
pin = PB0
chain_count = 41
color_order = GRB
initial_red = 0.0
initial_green = 0.0
initial_blue = 0.0

[idle_timeout]
timeout = 4500

[quad_gantry_level]
gantry_corners = 
	-60,-10
	410,420
points = 
	50,25
	50,275
	300,275
	300,25
speed = 100
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 10

[display_glyph chamber]
data = 
	................
	****************
	*....*....*....*
	*....*....*....*
	*....******....*
	*..............*
	*..............*
	*.....****.....*
	*.***.*..*.***.*
	*.....****.....*
	*......**......*
	*..............*
	*.************.*
	*...*......*...*
	****************
	................

[display_glyph voron]
data = 
	......***.......
	....*******.....
	...*********....
	.*************..
	*****..***..***.
	****..***..****.
	***..***..*****.
	**..***..******.
	******..***..**.
	*****..***..***.
	****..***..****.
	***..***..*****.
	.*************..
	...*********....
	....*******.....
	......***.......

[display_template _vheater_temperature]
param_heater_name = "extruder"
text = 
	{% if param_heater_name in printer %}
	{% set heater = printer[param_heater_name] %}
	
	{% if param_heater_name == "heater_bed" %}
	{% if heater.target %}
	{% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
	~bed_heat{frame}~
	{% else %}
	~bed~
	{% endif %}
	{% else %}
	~extruder~
	{% endif %}
	
	{ "%3.0f" % (heater.temperature,) }
	
	{% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
	~right_arrow~
	{ "%0.0f" % (heater.target,) }
	{% endif %}
	~degrees~
	{% endif %}

[display_data __voron_display extruder]
position = 0, 0
text = { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position = 0, 10
text = 
	{% if 'fan' in printer %}
	{% set speed = printer.fan.speed %}
	{% if speed %}
	{% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
	~fan{frame}~
	{% else %}
	~fan1~
	{% endif %}
	{ "{:>4.0%}".format(speed) }
	{% endif %}

[display_data __voron_display bed]
position = 1, 0
text = { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position = 1, 10
text = 
	{% set progress = printer.display_status.progress %}
	{ "{:^6.0%}".format(progress) }

[display_data __voron_display progress_text2]
position = 1, 10
text = 
	{% set progress = printer.display_status.progress %}
	{ draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position = 2, 10
text = 
	{% set ptime = printer.idle_timeout.printing_time %}
	{ "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display chamber]
position = 2, 0
text = 
	{% set chamber = printer['temperature_sensor Chamber'] %}
	~chamber~
	{ "%3.0f" % (chamber.temperature,) }
	~degrees~

[display_data __voron_display print_status]
position = 3, 0
text = 
	{% if printer.display_status.message %}
	{ printer.display_status.message }
	{% elif printer.idle_timeout.printing_time %}
	{% set pos = printer.toolhead.position %}
	{ "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
	{% else %}
	{ "V2.1400 " }
	~voron~
	{% endif %}

[menu __main __octoprint]
type = disabled

[menu __main __moonraker]
type = list
name = Moonraker
index = 0

[menu __main __moonraker __pause]
type = command
enable = {printer.print_stats.state == "printing"}
name = Pause print
gcode = 
	PAUSE

[menu __main __moonraker __resume]
type = command
enable = {printer.print_stats.state == "paused"}
name = Resume print
gcode = 
	RESUME

[menu __main __moonraker __abort]
type = command
enable = {printer.print_stats.state == "printing" or printer.print_stats.state == "paused"}
name = Abort print
gcode = 
	CANCEL_PRINT

[menu __main __filament __loadF]
type = disabled

[menu __main __filament __loads]
type = disabled

[menu __main __filament __unloadf]
type = disabled

[menu __main __filament __unloads]
type = disabled

[menu __main __filament __load]
type = command
name = Load Filament
index = 0
gcode = 
	LOAD_FILAMENT

[menu __main __filament __unload]
type = command
name = Unload Filament
index = 1
gcode = 
	UNLOAD_FILAMENT

[board_pins]
aliases = 
	
	EXP1_1=PE8, EXP1_2=PE7,
	EXP1_3=PE9, EXP1_4=PE10,
	EXP1_5=PE12, EXP1_6=PE13,
	EXP1_7=PE14, EXP1_8=PE15,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PA6, EXP2_2=PA5,
	EXP2_3=PB1, EXP2_4=PA4,
	EXP2_5=PB2, EXP2_6=PA7,
	EXP2_7=PC15, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=<5V>

[display]
display_group = __voron_display
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.1
initial_green = 0.1
initial_blue = 0.1
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=1 GREEN=0.27 BLUE=0 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0.27 BLUE=0 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=1 GREEN=0.27 BLUE=0 INDEX=3

[bed_mesh]
speed = 300
horizontal_move_z = 10
mesh_min = 56.17, 58.33
mesh_max = 280.83,291.67
fade_start = 0.96
fade_end = 15.06
probe_count = 5,5
algorithm = bicubic
zero_reference_position = 168.50, 175.00

[adxl345]
cs_pin = nhk:gpio27
spi_software_sclk_pin = nhk:gpio18
spi_software_mosi_pin = nhk:gpio20
spi_software_miso_pin = nhk:gpio19

[resonance_tester]
accel_chip = adxl345
probe_points = 
	175,175,20

[gcode_macro ADJUST_OFFSET]
gcode = 
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
	{% set tpu_adjust = 0.18 %}
	
	{% if FILAMENT_TYPE == "FLEX" or FILAMENT_TYPE == "TPU" %}
	{ action_respond_info("Adjusting height by %.2fmm" % (tpu_adjust)) }
	SET_GCODE_OFFSET Z_ADJUST={tpu_adjust} MOVE=1
	{% endif %}

[gcode_macro ADJUST_PA]
gcode = 
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
	{% set NOZZLE_DIAMETER = params.NOZZLE_DIAMETER|float %}
	
	{ action_respond_info("Filament type is %s" % (FILAMENT_TYPE)) }
	{% if FILAMENT_TYPE == "FLEX" %}
	{% if NOZZLE_DIAMETER == 0.04 %}
	SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE=0.0125
	{% endif %}
	{% elif FILAMENT_TYPE == "ABS" %}
	{% if NOZZLE_DIAMETER == 0.04 %}
	SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE=0.010
	{% endif %}
	{% elif FILAMENT_TYPE == "PLA" %}
	{% if NOZZLE_DIAMETER == 0.04 %}
	SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% else %}
	SET_PRESSURE_ADVANCE ADVANCE=0.010
	{% endif %}
	{% endif %}

[gcode_macro ADJUST_EXTRUDER_CURRENT]
gcode = 
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
	{% set tpu_adjust = 0.56 %}

[gcode_macro ADJUST_FOR_FILAMENT]
gcode = 
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
	
	ADJUST_OFFSET FILAMENT_TYPE={FILAMENT_TYPE}
	ADJUST_EXTRUDER_CURRENT FILAMENT_TYPE={FILAMENT_TYPE}

[gcode_macro LOAD_FILAMENT]
gcode = 
	SAVE_GCODE_STATE NAME=load_filament
	M83
	G92 E0
	G1 E75 F600
	RESTORE_GCODE_STATE NAME=load_filament

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	SAVE_GCODE_STATE NAME=unload_filament
	M83
	G92 E0
	G1 E-75 F600
	RESTORE_GCODE_STATE NAME=unload_filament

[gcode_macro G32]
gcode = 
	{% set DOCK_AFTER = params.DOCK_AFTER|default(True) %}
	
	BED_MESH_CLEAR
	G28
	
	QUAD_GANTRY_LEVEL
	G28
	G90
	
	
	
	
	
	
	
	
	
	G0 X175 Y175 Z30 F3600

[gcode_macro PRINT_WARMUP]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(100)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
	{% set SOAK = params.SOAK|default(15)|int %}
	
	status_heating_up
	M117 Heating...
	M140 S{BED_TEMP}
	M104 S{0.50 * EXTRUDER_TEMP|float}
	M190 S{BED_TEMP}
	M109 S{0.50 * EXTRUDER_TEMP|float}
	G28
	{% if FILAMENT_TYPE == "ABS" %}
	HEAT_SOAK BED_TEMP={BED_TEMP} CHAMBER_TEMP={CHAMBER_TEMP} SOAK={SOAK}
	{% endif %}

[gcode_macro PRINT_START]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
	{% set FILAMENT_TYPE = params.FILAMENT_TYPE|string %}
	
	status_ready
	M117
	
	G21
	G90
	M83
	
	
	G28 Z METHOD=CONTACT CALIBRATE=1
	QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE RUNS=2
	G28 Z METHOD=CONTACT CALIBRATE=0
	SMART_PARK
	
	M104 S{EXTRUDER_TEMP}
	M109 S{EXTRUDER_TEMP}
	SET_GCODE_OFFSET Z=0.15
	ADJUST_FOR_FILAMENT FILAMENT_TYPE={FILAMENT_TYPE}
	
	
	
	
	
	
	
	
	
	
	
	VORON_PURGE
	status_printing

[gcode_macro PRINT_END]
gcode = 
	M400
	G92 E0
	G1 E-10.0 F3600
	G91
	G0 Z1.00 X20.0 Y20.0 F20000
	TURN_OFF_HEATERS
	M107
	G1 Z2 F3000
	G90
	G0 X125 Y250 F3600
	
	BED_MESH_CLEAR
	
	led_off

[gcode_macro M900]
gcode = 
	
	{% set pa = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	
	G90
	G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
	G28 X Y
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro _led_vars]
variable_colors = {
	'caselight': {
	'printing': {'r': 1, 'g': 1, 'b': 1},
	'heating_up': {'r': 1, 'g': 0, 'b': 0},
	'heat_soaking': {'r': 1, 'g': .26, 'b': 0},
	'ready': {'r': 0, 'g': 0, 'b': 1},
	'off': {'r': 0, 'g': 0, 'b': 0}
	}
	}
variable_caselight_led_name = 'caselight'
gcode = 

[gcode_macro _set_leds]
gcode = 
	{% set red = params.RED|default(0)|float %}
	{% set green = params.GREEN|default(0)|float %}
	{% set blue = params.BLUE|default(0)|float %}
	{% set led = params.LED|string %}
	{% set transmit = params.TRANSMIT|default(1) %}
	{% set led_index = params.IDX %}
	
	{% if led_index %}
	set_led led={led} red={red} green={green} blue={blue} transmit={transmit} index={led_index}
	{% else %}
	set_led led={led} red={red} green={green} blue={blue} transmit={transmit}
	{% endif %}

[gcode_macro _set_leds_by_name]
gcode = 
	
	{% set leds_name = params.LEDS %}
	{% set color_name = params.COLOR %}
	{% set color = printer["gcode_macro _led_vars"].colors[leds_name][color_name] %}
	{% set led = printer["gcode_macro _led_vars"][leds_name + "_led_name"] %}
	{% set transmit = params.TRANSMIT|default(1) %}
	{% set led_index = params.IDX %}
	
	_set_leds led={led} red={color.r} green={color.g} blue={color.b} transmit={transmit} idx={idx}

[gcode_macro status_printing]
gcode = 
	
	{% set leds_name = params.LED|default("caselight") %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_leds_by_name leds={leds_name} transmit={transmit} color="printing"

[gcode_macro status_heating_up]
gcode = 
	
	{% set leds_name = params.LEDS|default("caselight") %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_leds_by_name leds={leds_name} transmit={transmit} color="heating_up"

[gcode_macro status_heat_soaking]
gcode = 
	
	{% set leds_name = params.LEDS|default("caselight") %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_leds_by_name leds={leds_name} transmit={transmit} color="heat_soaking"

[gcode_macro status_ready]
gcode = 
	
	{% set leds_name = params.LEDS|default("caselight") %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_leds_by_name leds={leds_name} transmit={transmit} color="ready"

[gcode_macro led_off]
gcode = 
	
	{% set leds_name = params.LEDS|default("caselight") %}
	{% set transmit = params.TRANSMIT|default(1) %}
	
	_set_leds_by_name leds={leds_name} transmit={transmit} color="off"

[gcode_macro HEAT_SOAK]
variable_target_temp = 0
variable_stage = None
variable_check_interval = 10
variable_soak_time_remaining = 0
variable_total_time_elapsed = 0
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(100)|float %}
	{% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(48)|float %}
	{% set SOAK = params.SOAK|default(15)|int %}
	{% set MAX_SOAK_TIME = params.MAX_SOAK_TIME|default(80)|int %}
	
	{% if 'xyz' not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	G90
	G0 X168.5 Y175 Z10 F3600
	M190 S{BED_TEMP}
	status_heat_soaking
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ CHAMBER_TEMP }
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'soaking'"
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ MAX_SOAK_TIME * 60 }
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
	
	
	
	
	
	
	
	
	
	
	
	
	
	{ action_respond_info("Heat soaking to %.2fC for a max time of %i minutes" % (CHAMBER_TEMP, MAX_SOAK_TIME)) }
	
	UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ check_interval }
	
	BASE_PAUSE

[gcode_macro CANCEL_HEAT_SOAK]
description = cancels an in-progress HEAT_SOAK cycle
gcode = 
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
	UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION=1

[delayed_gcode _heat_soaker]
gcode = 
	{% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
	
	
	{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
	{% set temp_sensor = printer['temperature_sensor Chamber'] %}
	{% set current_chamber_temp = temp_sensor.temperature %}
	{% set target_temp = heat_soak.target_temp %}
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
	
	{% set stage = heat_soak.stage %}
	
	{% if stage == "soaking" %}
	
	{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
	
	{% if soak_time_remaining == 0 or current_chamber_temp >= target_temp %}
	{ action_respond_info("Current temp %.1FC" % current_chamber_temp) }
	{% set stage = "done" %}
	{ action_respond_info("Setting to done") }
	{% endif %}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{stage}'"
	
	{% if stage in ("done", "cancel") %}
	
	
	{% if stage == "cancel" %}
	{% set stage = "done" %}
	TURN_OFF_HEATERS
	M107
	
	M117 { "soak cancelled after %.1fm" | format(total_time_elapsed / 60.0) }
	
	CANCEL_PRINT
	{% else %}
	M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
	
	BASE_RESUME
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
	
	{% else %}
	
	{% if total_time_elapsed % 60 == 0 %}
	
	
	{% if stage == "soaking" %}
	M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
	{% endif %}
	{% endif %}
	
	
	UPDATE_DELAYED_GCODE ID=_heat_soaker DURATION={ heat_soak.check_interval }
	
	
	G4 P1
	
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{stage}'"

[gcode_macro present_nozzle]
gcode = 
	G90
	{% if 'xyz' not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	G0 x168.5 y50 z175 F3600

[gcode_macro PCF_CHECK]
description = sub-macro of PREFLIGHT CHECK, not intended to be used outside of parent macro
gcode = 
	{% if printer.fan.rpm is not none %}
	{% if printer.fan.rpm > 500 %}
	{action_respond_info("Part fan self-test: PASS")}
	{% else %}
	CANCEL_PRINT
	{action_respond_info("Part fan self-test: FAIL!")}
	{% endif %}
	{% endif %}

[gcode_macro PREFLIGHT_CHECK]
description = Use before print startup, checks the part fan for failures
gcode = 
	M106 S128
	G4 P2000
	M400
	PCF_CHECK
	M106 S0

[virtual_sdcard]
path = /home/pi/printer_data/gcodes

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
variable_extrude = 1.0
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	
	{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
	{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{E} F2100
	G1 Z{z_safe} F900
	G90
	G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing = BASE_RESUME
gcode = 
	
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	
	G91
	G1 E{E} F2100
	RESTORE_GCODE_STATE NAME=PAUSE_state
	BASE_RESUME

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if not tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}
	{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},
	'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},
	'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',
	'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',
	'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}
	SET_GCODE_OFFSET X=0 Y=0
	G90
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION=0.5
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing}
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set purge_height = kamp_settings.purge_height | float %}
	{% set tip_distance = kamp_settings.tip_distance | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set purge_amount = kamp_settings.purge_amount | float %}
	{% set flow_rate = kamp_settings.flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	{RETRACT}
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	{UNRETRACT}
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	{RETRACT}
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	{UNRETRACT}
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	{RETRACT}
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Presmartpark_State
	
	G90
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}
	
	RESTORE_GCODE_STATE NAME=Presmartpark_State

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = False
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'M401'
variable_detach_macro = 'M402'
variable_purge_height = 0.8
variable_tip_distance = 10
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 15
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[exclude_object]

[skew_correction]

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 70.6
shaper_type_y = mzv
shaper_freq_y = 41.4